#!/bin/bash
################################################################################
##
## Isaac Genome Alignment Software
## Copyright (c) 2010-2014 Illumina, Inc.
## All rights reserved.
##
## This software is provided under the terms and conditions of the
## GNU GENERAL PUBLIC LICENSE Version 3
##
## You should have received a copy of the GNU GENERAL PUBLIC LICENSE Version 3
## along with this program. If not, see
## <https://github.com/illumina/licenses/>.
##
################################################################################
##
## file isaac-sort-reference
##
## Sort and annotate reference so that it can be used with iSAAC
##
## author Roman Petrovski
##
################################################################################

#set -x
set -o pipefail
shopt -s compat31 2>/dev/null

SORT_REFERENCE_MK=@iSAAC_HOME@@iSAAC_FULL_DATADIR@/makefiles/reference/SortReference.mk

dryRun=''
logLevel=2
# 0-bit mask provides best performance. otherwise kmers need to be regenerated and scanned against
# position data for very mask

genomeFile=''
outputDirectory=./IsaacIndex.$(date +%Y%m%d)
help=''
target=all

isaac_sort_reference_usage()
{
    cat <<EOF
**Usage**

$(basename $0) [options]

**Options**

    -g [ --genome-file ] arg                              Path to fasta file containing the reference contigs 
    -h [ --help ]                                         Print this message
    -n [ --dry-run ]                                      Don't actually run any commands; just print them
    -o [ --output-directory ] arg ($outputDirectory) Location where the results are stored
    -q [ --quiet ]                                        Avoid excessive logging
    -v [ --version ]                                      Only print version information
    --target arg ($target)                                    Individual target to make
EOF
}

isaac_sort_reference_version()
{
    echo @iSAAC_VERSION_FULL@
}

while (( ${#@} )); do
	param=$1
	shift
    if [[ $param == "--genome-file" || $param == "-g" ]]; then
        genomeFile=$(cd $(dirname "$1") && pwd)/$(basename "$1")
        shift
    elif [[ $param == "--dry-run" || $param == "-n" ]]; then
        dryRun='-n'
    elif [[ $param == "--output-directory" || $param == "-o" ]]; then
        outputDirectory=$1
        shift
    elif [[ $param == "--target" ]]; then
        target=$1
        shift
    elif [[ $param == "--help" || $param == "-h" ]]; then
        help=yes
    elif [[ $param == "--version" || $param == "-v" ]]; then
        isaac_sort_reference_version
        exit 1
    elif [[ $param == "--quiet" || $param == "-q" ]]; then
        logLevel=1
    else
        echo "ERROR: unrecognized argument: $param" >&2
        exit 2
    fi
done

[[ "" == "$outputDirectory" || "" == "$genomeFile" ]] && isaac_sort_reference_usage && echo "ERROR: --output-directory and --genome-file arguments are mandatory" >&2 && exit 2

[[ ! -e "$genomeFile" ]] && echo "ERROR: File not found: '$genomeFile'" && exit 2

[[ -n "$help" ]] && isaac_sort_reference_usage && exit 1

outputDirectory=$(mkdir -p "$outputDirectory" && (cd "$outputDirectory" && pwd)) || exit 2

make $dryRun \
    -f ${SORT_REFERENCE_MK} -C $outputDirectory GENOME_FILE:=$genomeFile iSAAC_LOG_LEVEL:=$logLevel $target || exit 2
